/*
 * Author: Pierre Augustamar
 * Purpose: INFX563 Homework - Triggers, Stored procedures and Functions 
 */


/*
This section of the script creates the expense reporting database with four tables
*/
USE master;  
GO  

CREATE DATABASE EXPENSE_REPORTING
GO

USE EXPENSE_REPORTING

GO
CREATE SCHEMA EXPENSE

GO

/*
  Employee table that contains employee name, address, whether they are acdtive, 
  cost center and their manager
    */
CREATE TABLE EXPENSE.EMPLOYEE
	 (
	      EMPLOYEE_ID INT IDENTITY PRIMARY KEY, 
		  FIRST_NAME VARCHAR(50) NOT NULL,
	      LAST_NAME VARCHAR(50) NOT NULL,
		  EMAIL_ADDRESS VARCHAR(30) NOT NULL,
		  IS_ACTIVE_FLAG BIT NOT NULL,
		  COST_CENTER INT NOT NULL,
		  EMPLOYEE_GIVEN_BUDGET DECIMAL(20, 2) NOT NULL,
		  MANAGER_ID INT
    )
GO


/*
  Expense table that contains the expense's amount, currency, the date of the transacation 
  and whether  a receipt was attached
    */
CREATE TABLE EXPENSE.EXPENSE
	(
		  EXPENSE_ID INT IDENTITY PRIMARY KEY,
		  IS_DELETED_FLAG BIT,
		  EXPENSE_CATEGORY VARCHAR(20) NOT NULL,
		  ATTENDEES_COUNT INT NOT NULL,
		  EXPENSE_AMOUNT DECIMAL(20, 2) NOT NULL,
		  EXPENSE_CURRENCY  VARCHAR(10) NOT NULL,
		  RECEIPT_ATTACH BIT NOT NULL,
		  TRANSACTION_DATE DATETIME NOT NULL
 	)

GO

/*
  Exception table that contains possible exceptions associated with an expense
    */
CREATE TABLE EXPENSE.EXCEPTION
	 (
		  EXCEPTION_CODE VARCHAR(50) NOT NULL,
		  EXCEPTION_MESSAGE VARCHAR(100) NOT NULL,
	      SEVERITY_LEVEL VARCHAR(20) NOT NULL,
		  EXPENSE_ID INT FOREIGN KEY REFERENCES EXPENSE.EXPENSE(EXPENSE_ID)
    )
GO

/*
  Report table that contains information about whether an expense was approved
   the date of the approval and by whom
    */
CREATE TABLE EXPENSE.REPORT
	 (
	      REPORT_ID INT IDENTITY PRIMARY KEY,
		  REPORT_NAME VARCHAR(60) NOT NULL,
		  REPORT_PURPOSE VARCHAR(60) NOT NULL,
		  EMPLOYEE_ID INT FOREIGN KEY REFERENCES EXPENSE.EMPLOYEE(EMPLOYEE_ID),
		  CREATION_DATE DATETIME NOT NULL,
		  PAID_DATE DATETIME,
		  APPROVE_DATE DATETIME,
		  EXCEPTION_COUNT INT,
		  IS_RECEIPT_ATTACH BIT, 
		  IS_RECEIPT_REQUIRED BIT NOT NULL,
		  APPROVE_BY VARCHAR(50),
		  EMPLOYEE_AMOUNT_REIMBURSEMENT DECIMAL(20,2), 
		  EXPENSE_ID INT FOREIGN KEY REFERENCES EXPENSE.EXPENSE(EXPENSE_ID)
     ) 

GO 



/*
Query to check the state of the expense table. Expected to return zero records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EXPENSE

 /*
Query to check the state of the expense table. Expected to return zero records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EMPLOYEE


 
/*
Query to check the state of the expense table. Expected to return zero records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EXCEPTION

 /*
Query to check the state of the expense table. Expected to return zero records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.REPORT


/*
This section of the script populates the employee table
*/
USE EXPENSE_REPORTING
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET)
VALUES ('James', 'Butt', 'jbutt@gmail.com', 1, 4256, 10000000.00);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Josephine', 'Darakjy', 'jdarakjy@gmail.com', 1, 4258, 100000.00,1);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Art', 'Venere', 'avenere@gmail.com', 1, 4260, 100000.00,1);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Lenna', 'Paprocki', 'lpaprocki@gmail.com', 1, 4262, 100000.00,1);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Donette', 'Foller', 'dfoller@gmail.com', 1, 4264, 10000.00,1);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Kris', 'Foller', 'dfoller@gmail.com', 1, 4258, 1000.00,3);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Willard', 'Kolmetz', 'wkolmetz@gmail.com', 0, 4264, 5000.00,5);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Ezekiel', 'Chui', 'echui@gmail.com', 1, 4262, 5000.00,4);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Willow', 'Kusko', 'wkusko@gmail.com', 1, 4258, 5000.00,6);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Sage', 'Wieser', 'swieser@gmail.com', 1, 4262,5000.00,5);
GO
INSERT INTO EXPENSE.EMPLOYEE (FIRST_NAME,LAST_NAME,EMAIL_ADDRESS, IS_ACTIVE_FLAG, COST_CENTER, EMPLOYEE_GIVEN_BUDGET,MANAGER_ID)
VALUES ('Yuki', 'Whobrey', 'ywhobreywieser@gmail.com', 1, 4260,2500.00,4);
GO


/*
This section of the script populates the expense table
*/
USE EXPENSE_REPORTING
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Meal', 5, 100.75, 'USD', 0, '2017-05-21')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Travel', 0, 400.25, 'USD', 1,'2017-10-29')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Meal', 4, 69, 'USD', 1, '2017-10-30')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Hotel', 0, 500, 'USD', 1, '2017-08-11')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Advertising', 0, 500000, 'USD', 1, '2016-10-28')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(1, 'Hotel', 0, 900, 'USD', 1, '2017-04-21')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Fuel', 0, 50, 'USD', 0, '2017-09-15')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Meal', 3, 100, 'SYP', 1, '2017-10-21')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Trade Shows', 0, 2500, 'EUR', 1,'2017-10-18')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Business Cards', 0, 100, 'EUR', 0, '2017-6-15')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, '', 10, 12500, 'USD', 1, '2017-10-15')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Office Supplies', 0, 10000, 'USD', 1, '2017-8-03')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Software', 0, 1000000, 'USD', 1, '2017-01-07')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Car Rental', 0, 1000, 'INR', 1, '2017-02-18')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Meals', 10, 10000, 'USD', 1, '2017-04-29')
GO
INSERT INTO EXPENSE.EXPENSE(IS_DELETED_FLAG,EXPENSE_CATEGORY, ATTENDEES_COUNT, EXPENSE_AMOUNT, EXPENSE_CURRENCY,RECEIPT_ATTACH,TRANSACTION_DATE)
VALUES(0, 'Trainings', 5, 1000,'EUR', 1, '2017-03-14')

/*
This section of the script populates the exception table
*/
USE EXPENSE_REPORTING
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(1, 'Missing receipt', 0, 1)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(1, 'Missing receipt', 0, 7)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(1, 'Missing receipt', 0, 10)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(2, 'Amount above allowed budget', 1, 5)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(10, 'Transaction date is not allowed for reiumbursement', 2, 5)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(5, 'Currency is not supported', 4, 8)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(1, 'Posted amount does not match receipt amount', 1, 11)
GO
INSERT INTO EXPENSE.EXCEPTION(EXCEPTION_CODE,EXCEPTION_MESSAGE, SEVERITY_LEVEL, EXPENSE_ID)
VALUES(6, 'Number of attendees do not match posted amount', 2, 15)
GO

/*
This section of the script populates the reporting table
*/
USE EXPENSE_REPORTING
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Team Lunch for iphone x release', 'Team building', 6, getdate(), NULL, NULL, 1, 0, 1, NULL, 0.00, 1)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Advertising for xbox one release', 'Advertising in Asia', 7, getdate(), NULL, NULL, 2, 1, 1, NULL, 0.00, 5)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Fuel for rental car', 'Recruiting trip to UCLA', 5, getdate()-4, getdate(), getdate()-2, 1, 0, 0, 'James Butt', 50.00, 7)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Lunch during seminar', 'expenses for trip in Syria', 10, getdate()-3, NULL, NULL, 1, 1, 1, NULL, 0.00, 8)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Business cards', 'Recruiting trip at the Seattle Center', 8, getdate()-2, NULL, NULL, 1, 0, 1, NULL, 0.00, 10)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Travel to China', 'Working with the engineering team in China', 7, getdate()-1, NULL, NULL, 1, 1, 1, NULL, 0.00, 11)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Lunch with potential partners', 'Meeting with partners from Google', 4, getdate()-5, NULL, NULL, 1, 1, 1, NULL, 0.00, 15)

GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Travel to Bangalore', 'Investigating business in India', 9, getdate()-3, getdate(), getdate()-1, 0, 1, 1, 'Kris Foller', 400.25, 2)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT,  IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Hackaton lunch', 'lunch expenses for team hackaton', 10, getdate()-3, getdate(), getdate()-1, 0, 1, 1, 'Donette Foller', 69, 3)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Travel to Houston', 'Hotel expenses', 6, getdate()-3, getdate(), getdate()-1, 0, 1, 1, 'Art Venere', 500.00, 4)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Trade shows in Paris', 'Showing our products at the Paris show', 10, getdate()-3, getdate(), getdate()-1, 0, 1, 1, 'Lenna Paprocki', 2500.00, 9)
GO
INSERT INTO EXPENSE.REPORT(REPORT_NAME,REPORT_PURPOSE, EMPLOYEE_ID, CREATION_DATE, PAID_DATE, APPROVE_DATE, EXCEPTION_COUNT, IS_RECEIPT_ATTACH, IS_RECEIPT_REQUIRED,APPROVE_BY, EMPLOYEE_AMOUNT_REIMBURSEMENT, EXPENSE_ID)
VALUES('Software upgrade', 'Upgrading production environment softwares', 5, getdate()-2, getdate(), getdate(), 0, 1, 1, 'James Butt', 1000000.00, 13)
GO 

/*
Query to check the state of the expense table. Expected to return 16 records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EXPENSE

 /*
Query to check the state of the expense table. Expected to return 11 records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EMPLOYEE


 
/*
Query to check the state of the expense table. Expected to return 8 records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.EXCEPTION

 /*
Query to check the state of the expense table. Expected to return 12 records
 */
 SELECT COUNT(*) 
 FROM EXPENSE.REPORT

 
  /*
   This section of the script add 3 stored procedures
 */

 /*
 stored procedures to get all the expenses that have been approved based on the cost center
 */
USE EXPENSE_REPORTING
GO
CREATE PROC dbo.ExpensesByCostCenterForADateRange
@StartDate DateTime, @EndDate Datetime
AS
IF @StartDate IS NULL OR @EndDate IS NULL
BEGIN
   RAISERROR('NULL values are not allowed', 14, 1)
   RETURN
END
SELECT  e.COST_CENTER, 
        SUM(r.EMPLOYEE_AMOUNT_REIMBURSEMENT) AS Spent
FROM EXPENSE_REPORTING.EXPENSE.REPORT r
    JOIN EXPENSE_REPORTING.EXPENSE.EMPLOYEE e ON r.EMPLOYEE_ID = e.EMPLOYEE_ID
WHERE APPROVE_BY IS NOT NULL AND r.CREATION_DATE BETWEEN @StartDate AND @EndDate
GROUP BY e.COST_CENTER
GO

 /*
 stored procedures to convert expenses amount to USD as employees with be reimburse in USD
 */
USE EXPENSE_REPORTING
GO
CREATE PROC dbo.CalculateExpenseAmountToUSDForNONUSExpenses
AS
  SELECT EXPENSE_CATEGORY,EXPENSE_ID,  EXPENSE_CURRENCY,EXPENSE_AMOUNT =
        CASE EXPENSE_CURRENCY
		     WHEN 'EUR' THEN EXPENSE_AMOUNT * 1.16
			 WHEN 'INR' THEN EXPENSE_AMOUNT *0.06
			 ELSE EXPENSE_AMOUNT
		END
  FROM EXPENSE.EXPENSE  
  
GO

/*
 stored procedures to report all the expenses that were rejected and the employee that submitted those expenses
 */
USE EXPENSE_REPORTING
GO
CREATE PROC dbo.RejectedExpensesByEmployee
AS
  SELECT e.EXPENSE_CATEGORY, e.EXPENSE_AMOUNT, r.REPORT_NAME, r.REPORT_PURPOSE, y.FIRST_NAME + ' ' + y.LAST_NAME AS 'Employee'
  FROM EXPENSE.EXPENSE e 
  JOIN [EXPENSE_REPORTING].[EXPENSE].[REPORT] r on e.EXPENSE_ID = r.EXPENSE_ID
  JOIN [EXPENSE_REPORTING].[EXPENSE].[EMPLOYEE] y on y.EMPLOYEE_ID = r.EMPLOYEE_ID
  WHERE r.APPROVE_DATE IS NULL
GO

  /*
   This section of the script add 2 user defined functions
 */

 /*
 This function returns top expenses categories (more than 2 count) and the total of those expenses
 */
 USE EXPENSE_REPORTING
GO 
CREATE FUNCTION fx_TopExpenseType
()
RETURNS @TopExpenses TABLE
  (
    ExpenseType nchar(20),
	Total smallint
  )
AS
BEGIN
	INSERT @TopExpenses
	SELECT EXPENSE_CATEGORY, COUNT(EXPENSE_CATEGORY)
    FROM [EXPENSE_REPORTING].[EXPENSE].[EXPENSE] 
    GROUP BY EXPENSE_CATEGORY
    HAVING COUNT(EXPENSE_CATEGORY) >= 2
RETURN
END
GO

 /*
 This function returns reimbursements to an employee for a specific date range
 */
USE EXPENSE_REPORTING
GO 
CREATE FUNCTION fx_ReimbursementByDateRangeForAnEmployee
(
	@ReportDateStart datetime,
	@ReportDateEnd datetime,
	@EmployeeId int)
RETURNS @ReportByDateRange TABLE
  (
    EmployeeId nchar(5),
	ReportPurpose nvarchar(25),
	Reimbursement decimal(20,2)
  )
AS
BEGIN
	INSERT @ReportByDateRange
	SELECT e.EMPLOYEE_ID, r.REPORT_PURPOSE, r.EMPLOYEE_AMOUNT_REIMBURSEMENT
	FROM EXPENSE.EMPLOYEE e 
	JOIN EXPENSE.REPORT r ON e.EMPLOYEE_ID = r.EMPLOYEE_ID
	WHERE r.CREATION_DATE BETWEEN @ReportDateStart AND @ReportDateEnd
	AND e.EMPLOYEE_ID = @EmployeeId
RETURN
END
GO	

  /*
   This section of the script adds 2 triggers
 */

  /*
 This trigger does not allow employee's budget to be changed
 */
USE EXPENSE_REPORTING
GO
CREATE TRIGGER Employee_Update 
  ON [EXPENSE_REPORTING].[EXPENSE].[EMPLOYEE]
  FOR UPDATE
AS 
IF UPDATE (EMPLOYEE_GIVEN_BUDGET)
BEGIN 
    BEGIN TRANSACTION
	RAISERROR(
		'You cannot delete any employees instead set the Is_ACTIVE_FLAG to false  for the related employee',
		10, 1)
	ROLLBACK TRANSACTION
END
GO

  /*
 This trigger does not allow employees to be deleted from the employee table
 */
USE EXPENSE_REPORTING
GO
CREATE TRIGGER Empl_DELETE ON [EXPENSE_REPORTING].[EXPENSE].[EMPLOYEE]
FOR DELETE
AS 
IF (SELECT COUNT(*) FROM Deleted) >= 1
BEGIN
	RAISERROR(
		'You cannot delete any employees instead set the Is_ACTIVE_FLAG to false  for the related employee',
		16, 1)
	ROLLBACK TRANSACTION
END

GO 

